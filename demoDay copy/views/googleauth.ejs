Create event
<!DOCTYPE html>
<html>
  <head>
    <title>Google Calendar API Quickstart</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <p>Google Calendar API Quickstart</p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" style="display: none">Authorize</button>
    <button id="signout_button" style="display: none">Sign Out</button>

    <pre id="content" style="white-space: pre-wrap"></pre>

    <script type="text/javascript">
      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = [
        "https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest",
      ];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      // var SCOPES = "https://www.googleapis.com/auth/calendar.readonly"
      var SCOPES = "https://www.googleapis.com/auth/calendar";

      var authorizeButton = document.getElementById("authorize_button");
      var signoutButton = document.getElementById("signout_button");

      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load("client:auth2", initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      // Client ID and API key from the Developer Console
      const API_KEY = "AIzaSyAdxIh-FTZ5fBWlUYgWnOb7-Qa8pODuG1E";
      const CLIENT_ID =
        "165513027814-39l6etsntqlpkv4tjv4kc9s83pqbrf0e.apps.googleusercontent.com";
      function initClient() {
        gapi.client
          .init({
            apiKey: API_KEY,
            clientId: CLIENT_ID,
            discoveryDocs: DISCOVERY_DOCS,
            scope: SCOPES,
          })
          .then(
            function () {
              // Listen for sign-in state changes.
              gapi.auth2
                .getAuthInstance()
                .isSignedIn.listen(updateSigninStatus);

              // Handle the initial sign-in state.
              updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
              authorizeButton.onclick = handleAuthClick;
              signoutButton.onclick = handleSignoutClick;
            },
            function (error) {
              appendPre(JSON.stringify(error, null, 2));
            }
          );
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = "none";
          signoutButton.style.display = "block";
          //listUpcomingEvents();
          // addEvent()
          deleteReminders()
        } else {
          authorizeButton.style.display = "block";
          signoutButton.style.display = "none";
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById("content");
        var textContent = document.createTextNode(message + "\n");
        pre.appendChild(textContent);
      }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      function  listUpcomingEvents() {
        let startDate = new Date('2021-12-01')
        for(let i=0;i<60;i++){
          let searchDate = new Date(startDate.getTime)
        }
        gapi.client.calendar.events
          .list({
            calendarId: "primary",
            timeMin: new Date('2021-12-01').toISOString(),
            showDeleted: false,
            singleEvents: true,
            maxResults: 1000,
            orderBy: "startTime",
          })
          .then(function (response) {
            var events = response.result.items;
            appendPre("Upcoming events:");

            if (events.length > 0) {
              
              let eventDate = new Date(events[0].start.dateTime)
              console.log(events[0].start.dateTime,eventDate,events[0])

              let currentYear = eventDate.getYear()
              let currentMonth = eventDate.getMonth()
              let currentDay = 0
              
              console.log(currentDay)
              console.log(currentMonth)
              console.log(currentYear)
              for (i = 0; i < events.length; i++) {
                var event = events[i];
                var when = event.start.dateTime;
                if (!when) {
                  when = event.start.date;
                }
                eventDate = new Date (event.start.dateTime)
                if(eventDate.getMonth()===2){
                  break

                }
                if(currentDay !== eventDate.getDate()){
                  const reminder =
                  console.log('should create an event before', event.start.dateTime)
                  currentDay = eventDate.getDate()
                  let reminderStartDate = new Date (eventDate.getTime()-1000*60*60) 
                  let reminderEndDate = new Date(reminderStartDate.getTime()+1000*60*10)
                  console.log("reminder Start Date",reminderStartDate)
                  console.log("reminder End Date", reminderEndDate)
                  setTimeout(()=>addEvent('Time to warm up your car',reminderStartDate,reminderEndDate," ", " "),i*1000)
                  // addEvent('Time to warm up your car',reminderStartDate,reminderEndDate," ", " ")

                }
                appendPre(event.summary + " (" + when + ")");
              }
            } else {
              appendPre("No upcoming events found.");
            }
          });
      }

      // function  deleteReminders() {
      
      //   gapi.client.calendar.events
      //     .list({
      //       calendarId: "primary",
      //       timeMin: new Date('2021-12-01').toISOString(),
      //       showDeleted: false,
      //       singleEvents: true,
      //       maxResults: 1000,
      //       orderBy: "startTime",
      //       q:'Time_to_warm_up_your_car'
      //     })
      //     .then(function (response) {
      //       var events = response.result.items;
           

      //       if (events.length > 0) {
              
      //         for (i = 0; i < events.length; i++) {
      //           var event = events[i];
      //           var when = event.start.dateTime;
      //           if (!when) {
      //             when = event.start.date;
      //           }
      //           eventDate = new Date (event.start.dateTime)
               
      //           console.log("should delete",event)
      //           var request = gapi.client.calendar.events.delete({
      //           calendarId: "primary",
      //          resource: event,
      //   });

      //   request.execute(function (event) {
      //     appendPre("Event created: " + event.htmlLink);
      //     console.log(event)
          
      //   });
      //           break
                
      //         }
      //       } else {
      //         console.log("No reminders found.");
      //       }
      //     });
      //   }
    
  

      function addEvent(title,startTime,endTime,summary,description) {
        // Refer to the JavaScript quickstart on how to setup the environment:
        // https://developers.google.com/calendar/quickstart/js
        // Change the scope to 'https://www.googleapis.com/auth/calendar' and delete any
        // stored credentials.

        var event = {
          summary: title,
          // 'location': '800 Howard St., San Francisco, CA 94103',
          description: description,
          start: {
            dateTime: startTime.toISOString(),
            timeZone: "America/New_York",
          },
          end: {
            dateTime: endTime.toISOString(),
            timeZone: "America/New_York",
          },
          recurrence: [ ],
        //recurrence: ["RRULE:FREQ=DAILY;COUNT=2"],
          // // 'attendees': [
          //   {'email': 'lpage@example.com'},
          //   {'email': 'sbrin@example.com'}
          // ],
          reminders: {
            useDefault: false,
            overrides: [
              // {'method': 'email', 'minutes': 24 * 60},
              { method: "popup", minutes: 10 },
            ],
          },
        };

        var request = gapi.client.calendar.events.insert({
          calendarId: "primary",
          resource: event,
        });

        request.execute(function (event) {
          appendPre("Event created: " + event.htmlLink);
          console.log(event)
          
        });
      } 
    </script>

    <script
      async
      defer
      src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()"
    ></script>
  </body>
</html>
